import { useRef, useState } from 'react';
import { Animated, FlatList, StyleSheet, Text, View } from 'react-native';

const MonthPicker = (props) => {
  // const { items, onIndexChange, itemHeight } = props;
  const [itemHeight, setItemHeight] = useState(55);
  const [items, setItems] = useState(() => {
    // return ['', 1, 2, 4, 5, 6, 7, 8, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, '', '', ''];
    return [
      '',
      'มกราคม.',
      'กุมภาพันธ์.',
      'มีนาคม.',
      'เมษายน.',
      'พฤษภาคม.',
      'มิถุนายน.',
      'กรกฎาคม.',
      'สิงหาคม.',
      'กันยายน.',
      'ตุลาคม.',
      'พฤศจิกายน.',
      'ธันวาคม',
      '',
      '',
      '',
    ];
    // return [
    //   '',
    //   'January',
    //   'February',
    //   'March',
    //   'April',
    //   'May',
    //   'June',
    //   'July',
    //   'August',
    //   'September',
    //   'October',
    //   'November',
    //   'December',
    //   '',
    //   '',
    //   '',
    // ];
  });

  const scrollY = useRef(new Animated.Value(0)).current;

  const momentumScrollEnd = (event) => {
    const y = event.nativeEvent.contentOffset.y;
    const index = Math.round(y / 55);
    // props.onIndexChange(index);
    console.log(index, items[index + 1]);
  };

  const renderItem = ({ item, index }) => {
    try {
      const inputRange = [(index - 2) * itemHeight, (index - 1) * itemHeight, index * itemHeight];

      const scale = scrollY.interpolate({
        inputRange,
        outputRange: [0.8, 1, 0.8],
      });

      return (
        <Animated.View
          style={[{ height: itemHeight, transform: [{ scale }] }, styles.animatedContainer]}
        >
          <Text style={styles.pickerItem}>{item}</Text>
        </Animated.View>
      );
    } catch (error) {
      console.log(error);
      return null;
    }
  };

  const renderItemBak = ({ item }) => {
    return <Text style={[styles.pickerItem, { height: 55 }]}>{item}</Text>;
  };

  return (
    <View style={styles.container}>
      {/* <View style={[styles.indicatorHolder, { top: 55 }]}>
        <View style={[styles.indicator]} />
        <View style={[styles.indicator, { marginTop: 55 }]} />
      </View> */}

      <View style={{ ...styles.flatlistContainer, height: itemHeight * 5 }}>
        {/* <FlatList
          data={items}
          snapToInterval={55}
          renderItem={renderItem}
          showsVerticalScrollIndicator={false}
          onMomentumScrollEnd={momentumScrollEnd}
        /> */}
        <Animated.FlatList
          data={items}
          renderItem={renderItem}
          showsVerticalScrollIndicator={false}
          snapToInterval={itemHeight}
          onMomentumScrollEnd={momentumScrollEnd}
          scrollEventThrottle={16}
          onScroll={Animated.event([{ nativeEvent: { contentOffset: { y: scrollY } } }], {
            useNativeDriver: true,
          })}
          getItemLayout={(_, index) => ({
            length: itemHeight,
            offset: itemHeight * index,
            index,
          })}
        />

        <View style={[styles.indicatorHolder, { top: 55 }]}>
          <View style={[styles.indicator]} />
          <View style={[styles.indicator, { marginTop: 55 }]} />
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    // flex: 1,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  flatlistContainer: {
    // padding: 10,
    width: 200,
    // height: itemHeight * 5,
    height: 55 * 5,
    backgroundColor: '#1f1f1fd6',
    zIndex: 999,
  },
  pickerItem: {
    fontSize: 28,
    fontWeight: '600',
    textAlign: 'center',
    color: 'aqua',
    borderColor: 'red',
    // borderWidth: 2,
  },
  indicatorHolder: {
    position: 'absolute',
    backgroundColor: 'blue',
    // opacity: 0.1,
    zIndex: 1,
  },
  indicator: {
    width: 20,
    height: 1,
    backgroundColor: '#ccc',
  },
  animatedContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
});
export default MonthPicker;
